package shopify

import (
	"fmt"
	"time"
)

// Orders is a collection of orders
type Orders []Order

// Order is a customer's completed request to purchase one or more products from a shop.
type Order struct {
	// ID is the ID of the order
	ID int64
	// The order name, generated by combining the number property with the order prefix and suffix.
	Name string
	// UpdatedAt is the date and time when the order was last modified.
	UpdatedAt time.Time
	// CreatedAt is the autogenerated date and time when the order was created in Shopify. The value for this property cannot be changed.
	CreatedAt time.Time
	// ClosedAt is the date and time when the order was closed.
	ClosedAt time.Time
	// FulfillmentStatus - The order's status in terms of fulfilled line items.
	/*
		Valid values:

		- fulfilled: Every line item in the order has been fulfilled.
		- "": None of the line items in the order have been fulfilled.
		- partial: At least one line item in the order has been fulfilled.
		- restocked: Every line item in the order has been restocked and the order canceled.
	*/
	FulfillmentStatus string
	// FinancialStatus is the status of payments associated with the order. Can only be set when the order is created.
	/*
		Valid values:

		- pending: The payments are pending. Payment might fail in this state. Check again to confirm whether the payments have been paid successfully.
		- authorized: The payments have been authorized.
		- partially_paid: The order have been partially paid.
		- paid: The payments have been paid.
		- partially_refunded: The payments have been partially refunded.
		- refunded: The payments have been refunded.
		- voided: The payments have been voided.
	*/
	FinancialStatus string
	// ShippingLines is a collection of details about the shipping method used.
	ShippingLines []ShippingLine
	// Customer is information about the customer.
	Customer Customer
	// Fulfillments is a list of fulfillments associated with the order.
	Fulfillments []Fulfillment
	// LineItems is a list of line item objects, each containing information about an item in the order.
	LineItems LineItems
}

// OrderQuery are properties that can be used to filter the returned orders
// See https://shopify.dev/docs/admin-api/rest/reference/orders/order#index-2021-04
type OrderQuery struct {
	/*
		Filter orders by their fulfillment status.

		(default: any)
		- shipped: Show orders that have been shipped. Returns orders with fulfillment_status of fulfilled.
		- partial: Show partially shipped orders.
		- unshipped: Show orders that have not yet been shipped. Returns orders with fulfillment_status of null.
		- any: Show orders of any fulfillment status.
		- unfulfilled: Returns orders with fulfillment_status of null or partial.
	*/
	FulfillmentStatus string
	/*
		Filter orders by their financial status.

		(default: any)
		- authorized: Show only authorized orders
		- pending: Show only pending orders
		- paid: Show only paid orders
		- partially_paid: Show only partially paid orders
		- refunded: Show only refunded orders
		- voided: Show only voided orders
		- partially_refunded: Show only partially refunded orders
		- any: Show orders of any financial status.
		- unpaid: Show authorized and partially paid orders.
	*/
	FinancialStatus string
	/*
		Filter orders by their status.

		(default: open)
		- open: Show only open orders.
		- closed: Show only closed orders.
		- cancelled: Show only canceled orders.
		- any: Show orders of any status, including archived orders.
	*/
	Status string
	/*
		Show orders after the specified ID.
	*/
	SinceID int64
	/*
		Retrieve only orders specified by a list of order IDs.
	*/
	IDs []int64
}

// OrderRepository maintains the orders in the shop
type OrderRepository interface {
	// List gets all of the orders
	List(query OrderQuery) (Orders, error)
	// Get gets an order
	Get(id int64) (Order, error)
	// Close closes an order
	Close(id int64) error
}

// ErrOrderNotFound is thrown when no order is found with the ID
type ErrOrderNotFound struct {
	id int64
}

func (err ErrOrderNotFound) Error() string {
	return fmt.Sprintf("order %v not found", err.id)
}

// NewErrOrderNotFound builds the error
func NewErrOrderNotFound(id int64) ErrOrderNotFound {
	return ErrOrderNotFound{
		id,
	}
}
